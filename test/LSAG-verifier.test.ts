import { BigNumberish } from "ethers";
import { ethers } from "hardhat";

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { expect } = require("chai");

describe("LSAG evm-verifier", function () {
  it("Verify a ring signature", async function () {
    // link libraries
    const contractFactory = await ethers.getContractFactory("LSAGVerifier");


    // deploy SigVerifier contract
    const SigVerifier = await contractFactory.deploy();

    const message: BigNumberish =
      40340039748299835169756547746037309976814975367605249759025889748097184499642n;

    const ring_: BigNumberish[] = [
      10332262407579932743619774205115914274069865521774281655691935407979316086911n,
      100548694955223641708987702795059132275163693243234524297947705729826773642827n,
      15164162595175125008547705889856181828932143716710538299042410382956573856362n,
      20165396248642806335661137158563863822683438728408180285542980607824890485122n,
      30103554500144535254965021336757008479704861502777924021458799636567575289359n,
      52090609727678693574435399254703833889410700116234244177206170117175907888773n
    ];

    const responses: BigNumberish[] = [
      1937035142596246788172577232054709726386880441279550832067530347910661804397n,
      90743482286830539503240959006302832933333810038750515972785732718729991261126n,
      96412385879886539533486001105240898348496127772162723505348608622932379532377n
    ];

    const c: BigNumberish =
    62952277454403766450460524697126371346688834356034598054299565488024177740116n;

    const keyImage: BigNumberish[] = [
      98193735886396485133778481629685208820169538852595731758881502872312048764318n,
      116231236030069592449385598204153478489317434363868929140849608303441221499n
    ];

    const linkabilityFlag: string = "test";

    const witnesses: BigNumberish[] = [
      54947412661032850595380875152967026384986869266190618984003180003085157033882n,
      81199804739094253966327163304157822985025656177476697331715832917809427832118n,
      104372215371359927431617976968681529559538717008648949045862516925399722903017n,
      28358436228981655719228739644387989230869161916002372672341586997329933962587n,
      79191984649859893327956204842647663945114325773116206659174609169928665832384n,
      42680930582016692622235253596720520459301209789774065317885712809286950469871n,
      51935496449936898242158409040945019466756068306473891118721404472987249987263n,
      75960427731268710931164361483848812902858109573039768997119454725376887989099n,
      41354801633273069098509608384869551473942930016877385355285128938230485519190n,
      25628725712848318158802557910705895973233280316308874492675120852010425999076n,
      38830833092993868737538433661842999550983426847052784949243100158783608133750n,
      69008211927902102278311171965375302599544340541477752885888080856337037597763n,
      25073847921237472885826280307919388473201219224567186113340094027991077611861n,
      86417374174559883547606511023742888345552700009003389617332252224163530372680n,
      77896388609595476740158329137195894228507582831094688228479666385244812544120n,
      45653014996411960483311418733426857138512311653660700803768492470034271781994n,
      81230926302419340442564263214845198506626605277268867140245666619741444727575n,
      34231787129635675314727262549372337265323999290050001983515590107300026037600n
    ];


    // console.log("ringSize: ", ring_.length / 2);
    // console.log("responses len: ", responses.length);
    console.log(
      "output: ",
      await SigVerifier.verify(message, ring_, responses, c, keyImage, linkabilityFlag, witnesses),
    );

    // const point1: BigNumberish[] = [10332262407579932743619774205115914274069865521774281655691935407979316086911n, 100548694955223641708987702795059132275163693243234524297947705729826773642827n];
    // const point2: BigNumberish[] = [30103554500144535254965021336757008479704861502777924021458799636567575289359n, 52090609727678693574435399254703833889410700116234244177206170117175907888773n];

    // console.log("ecAdd: ",
    //   await SigVerifier.ecAdd(point1, point2),
    // )
    expect(
      await SigVerifier.verify(message, ring_, responses, c, keyImage, linkabilityFlag, witnesses)
    ).to.equal(true);

    // uint256 message,
    //   uint256[] memory ring,
    //     uint256[] memory responses,
    //       uint256 c, // signature seed
    //         uint256[2] memory keyImage,
    //           string memory linkabilityFlag, // todo: use bytes instead
    //             uint256[] memory witnesses /
  });
});
